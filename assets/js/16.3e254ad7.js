(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{222:function(t,e,v){"use strict";v.r(e);var r=v(0),o=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("div",{staticClass:"content"},[v("h1",{attrs:{id:"carousel"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#carousel","aria-hidden":"true"}},[t._v("#")]),t._v(" Carousel")]),t._v(" "),v("p",[v("a",{attrs:{href:"/src/components/Carousel/index.js"}},[v("code",[t._v("Carousel")])]),t._v(" is a highly customizable component that allows the user to rotate through a list of child components.")]),t._v(" "),v("p",[t._v("Play around at /dev/carousels if ya want!")]),t._v(" "),v("p",[t._v("N.B.: Be mindful of nesting Carousel within flex containers, as it will probably break.")]),t._v(" "),v("h2",{attrs:{id:"props"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#props","aria-hidden":"true"}},[t._v("#")]),t._v(" Props")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Prop")]),t._v(" "),v("th",[t._v("Type")]),t._v(" "),v("th",[t._v("Description")]),t._v(" "),v("th",[t._v("Default")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("adaptHeight")]),t._v(" "),v("td",[t._v("boolean")]),t._v(" "),v("td",[t._v("Should the slider change height with the current displayed item. Currently ignored if "),v("code",[t._v("itemsToShow")]),t._v(" > 1. Will also be ignored if "),v("code",[t._v("fillParent")]),t._v(" is "),v("code",[t._v("true")]),t._v(".")]),t._v(" "),v("td",[t._v("false")])]),t._v(" "),v("tr",[v("td",[t._v("align")]),t._v(" "),v("td",[t._v("oneOf(left, center)")]),t._v(" "),v("td",[t._v("How to horizontally align the current item. If "),v("code",[t._v("center")]),t._v(", the current item is centered in the carousel.")]),t._v(" "),v("td",[t._v("left")])]),t._v(" "),v("tr",[v("td",[t._v("arrowColor")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("Color to apply to the arrow and arrow label")]),t._v(" "),v("td",[t._v("colorNeutralCD")])]),t._v(" "),v("tr",[v("td",[t._v("autoplay")]),t._v(" "),v("td",[t._v("bool")]),t._v(" "),v("td",[t._v("Start playing on mount? Paused if the user interacts with the carousel.")]),t._v(" "),v("td",[t._v("false")])]),t._v(" "),v("tr",[v("td",[t._v("autoplayDelay")]),t._v(" "),v("td",[t._v("number")]),t._v(" "),v("td",[t._v("Milliseconds between changing slides")]),t._v(" "),v("td",[t._v("6000")])]),t._v(" "),v("tr",[v("td",[t._v("backArrowClassName")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("CSS class to apply to the back arrow")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("currentIndex")]),t._v(" "),v("td",[t._v("number")]),t._v(" "),v("td",[t._v("Use if controlling index via props")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("defaultIndex")]),t._v(" "),v("td",[t._v("number")]),t._v(" "),v("td",[t._v("Use to set initial index and then turn control over to the user")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("didChange")]),t._v(" "),v("td",[t._v("func(currentIndex)")]),t._v(" "),v("td",[t._v("Called when change animation completes")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("dotsType")]),t._v(" "),v("td",[t._v("oneOf")]),t._v(" "),v("td",[t._v("none, default (below), skyline, above")]),t._v(" "),v("td",[t._v("default")])]),t._v(" "),v("tr",[v("td",[t._v("edgeGutterWidth")]),t._v(" "),v("td",[t._v("number or 'adaptive'")]),t._v(" "),v("td",[t._v("Space at the beginning and end of the carousel track. Useful for ‘cutoff’ effect and/or if you want this to be a different value than the gutter between items. If a number, use that many px. If "),v("code",[t._v("adaptive")]),t._v(", use 16 or 24px according to the breakpoint.")]),t._v(" "),v("td",[t._v("0")])]),t._v(" "),v("tr",[v("td",[t._v("fillParent")]),t._v(" "),v("td",[t._v("boolean")]),t._v(" "),v("td",[t._v("Should the carousel height match its parent container’s height?")]),t._v(" "),v("td",[t._v("false")])]),t._v(" "),v("tr",[v("td",[t._v("forwardArrowClassName")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("CSS class to apply to the next arrow")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("gutterWidth")]),t._v(" "),v("td",[t._v("number or 'adaptive'")]),t._v(" "),v("td",[t._v("Space between items. If a number, use that many px. If "),v("code",[t._v("adaptive")]),t._v(", use 16 or 24px according to the breakpoint. If "),v("code",[t._v("showItemDivider")]),t._v(" is "),v("code",[t._v("true")]),t._v(", this prop represents the space on each side of the divider (for a total space between items of "),v("code",[t._v("gutterWidth * 2 + 1")]),t._v(").")]),t._v(" "),v("td",[t._v("0")])]),t._v(" "),v("tr",[v("td",[t._v("infinite")]),t._v(" "),v("td",[t._v("boolean")]),t._v(" "),v("td",[t._v("Loop? Autoplaying carousels loop while active.")]),t._v(" "),v("td",[t._v("false")])]),t._v(" "),v("tr",[v("td",[t._v("itemClassName")]),t._v(" "),v("td",[t._v("string")]),t._v(" "),v("td",[t._v("CSS class string to apply to the child items in the carousel")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("itemsToShow")]),t._v(" "),v("td",[t._v("number")]),t._v(" "),v("td",[t._v("Number of items to display at once. Must be a whole number. Ignored if "),v("code",[t._v("itemWidth")]),t._v(" is set.")]),t._v(" "),v("td",[t._v("1")])]),t._v(" "),v("tr",[v("td",[t._v("itemWidth")]),t._v(" "),v("td",[t._v("number")]),t._v(" "),v("td",[t._v("Item width. If <= 1, it represents a percentage of the carousel width. Otherwise, it is used as the pixel value. Takes precedence over "),v("code",[t._v("itemsToShow")]),t._v(".")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("renderArrow")]),t._v(" "),v("td",[t._v("func({ onClick, direction }) => Component")]),t._v(" "),v("td",[t._v("Render your own arrow component for the given direction. If set, "),v("code",[t._v("backArrowClassName")]),t._v(", "),v("code",[t._v("forwardArrowClassName")]),t._v(", "),v("code",[t._v("showArrowText")]),t._v(", and "),v("code",[t._v("arrowColor")]),t._v(" are ignored.")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("restart")]),t._v(" "),v("td",[t._v("bool")]),t._v(" "),v("td",[t._v("A flag to restart a carousel from the start of the list")]),t._v(" "),v("td",[t._v("false")])]),t._v(" "),v("tr",[v("td",[t._v("showArrows")]),t._v(" "),v("td",[t._v("bool")]),t._v(" "),v("td",[t._v("Show prev/next arrows?")]),t._v(" "),v("td",[t._v("false")])]),t._v(" "),v("tr",[v("td",[t._v("showArrowText")]),t._v(" "),v("td",[t._v("bool")]),t._v(" "),v("td",[t._v('Show "Next"/"Previous" text under respective arrows')]),t._v(" "),v("td",[t._v("false")])]),t._v(" "),v("tr",[v("td",[t._v("showItemDivider")]),t._v(" "),v("td",[t._v("bool")]),t._v(" "),v("td",[t._v("Show a dividing line between items?")]),t._v(" "),v("td",[t._v("false")])]),t._v(" "),v("tr",[v("td",[t._v("willChange")]),t._v(" "),v("td",[t._v("func(nextIndex, prevIndex)")]),t._v(" "),v("td",[t._v("Called when the index will change.")]),t._v(" "),v("td")])])]),t._v(" "),v("h2",{attrs:{id:"itemwidth-vs-itemstoshow"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#itemwidth-vs-itemstoshow","aria-hidden":"true"}},[t._v("#")]),t._v(" "),v("code",[t._v("itemWidth")]),t._v(" vs "),v("code",[t._v("itemsToShow")])]),t._v(" "),v("p",[v("code",[t._v("itemWidth")]),t._v(" will ensure items have that width at the cost of potentially cutting some items off at the edges. "),v("code",[t._v("itemsToShow")]),t._v(" will ensure that number of items (including gutters, if any) neatly fit into the carousel width. Use whichever is more appropriate for your use case. If both are set only "),v("code",[t._v("itemWidth")]),t._v(" is used.")]),t._v(" "),v("h2",{attrs:{id:"item-grouping"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#item-grouping","aria-hidden":"true"}},[t._v("#")]),t._v(" Item grouping")]),t._v(" "),v("p",[t._v("Carousel will figure out how many items can be fully visible at a time based on the (automatically measured) container width. This is called "),v("code",[t._v("groupSize")]),t._v(". If the user clicks a dot, clicks an arrow, or swipes, the carousel will attempt to move "),v("code",[t._v("groupSize")]),t._v(" items forward or back. If the user pans or if the code sets a specific index, the carousel moves to that specific item as expected.")]),t._v(" "),v("p",[t._v("If the "),v("code",[t._v("align")]),t._v(" prop is "),v("code",[t._v("center")]),t._v(", "),v("code",[t._v("groupSize")]),t._v(" is set to 1 regardless of other props. This is because centering the current item necessarily means focusing on one at a time.")]),t._v(" "),v("p",[t._v("In all cases, the logic will prevent moving the carousel beyond the first or last item.")])])}],!1,null,null,null);o.options.__file="Carousel.md";e.default=o.exports}}]);