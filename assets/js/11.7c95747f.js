(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{167:function(t,e,s){"use strict";s.r(e);var i=s(0),n=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"asyncbutton"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#asyncbutton","aria-hidden":"true"}},[t._v("#")]),t._v(" AsyncButton")]),t._v(" "),s("p",[s("a",{attrs:{href:"/src/components/AsyncButton/index.js"}},[s("code",[t._v("AsyncButton")])]),t._v(" is a button that performs an async action (re: promise) on click. When the action is in progress, "),s("code",[t._v("AsyncButton")]),t._v(" is disabled and displays a pending message. When the action completes successfully, a success message is briefly displayed before switching back to the initial label. If the action fails, the initial label is displayed immediately. These message transitions are animated.")]),t._v(" "),s("h2",{attrs:{id:"props"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props","aria-hidden":"true"}},[t._v("#")]),t._v(" Props")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Prop")]),t._v(" "),s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Description")]),t._v(" "),s("th",[t._v("Default")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("authRequired")]),t._v(" "),s("td",[t._v("bool")]),t._v(" "),s("td",[t._v("Passed through to underlying "),s("code",[t._v("Clickable")]),t._v(". If "),s("code",[t._v("true")]),t._v(" and user is logged out, displays the login modal and then performs the "),s("code",[t._v("onClick")]),t._v(" action after logging in.")]),t._v(" "),s("td",[t._v("false")])]),t._v(" "),s("tr",[s("td",[t._v("buttonStyle")]),t._v(" "),s("td",[t._v("string")]),t._v(" "),s("td",[t._v("One of the valid button styles.")]),t._v(" "),s("td",[t._v("default")])]),t._v(" "),s("tr",[s("td",[t._v("isDelayed")]),t._v(" "),s("td",[t._v("bool")]),t._v(" "),s("td",[t._v("If "),s("code",[t._v("true")]),t._v(", does not display "),s("code",[t._v("labelPending")]),t._v(" even if the action is pending. Use if "),s("code",[t._v("onClick")]),t._v(" does something else before actually making an async request, like showing a modal.")]),t._v(" "),s("td",[t._v("false")])]),t._v(" "),s("tr",[s("td",[t._v("isDisabled")]),t._v(" "),s("td",[t._v("bool")]),t._v(" "),s("td",[t._v("If true, prevents "),s("code",[t._v("onClick")]),t._v(" from executing and applies custom disabled styling. "),s("code",[t._v("AsyncButton")]),t._v(" is automatically disabled while the action is pending, so only set this to "),s("code",[t._v("true")]),t._v(" if you want to disable it for another reason.")]),t._v(" "),s("td",[t._v("false")])]),t._v(" "),s("tr",[s("td",[t._v("label")]),t._v(" "),s("td",[t._v("string")]),t._v(" "),s("td",[t._v("Label to display in the default state.")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("labelPending")]),t._v(" "),s("td",[t._v("string")]),t._v(" "),s("td",[t._v("Label to display on click while the action is in progress. An animating ellipsis is appended to this label.")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("labelSuccess")]),t._v(" "),s("td",[t._v("string")]),t._v(" "),s("td",[t._v("Label to display briefly when the action completes successfully.")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("onClick")]),t._v(" "),s("td",[t._v("func")]),t._v(" "),s("td",[t._v("Thing to do on click. Must return a promise.")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("trackingProps")]),t._v(" "),s("td",[t._v("obj")]),t._v(" "),s("td",[t._v("Event tracking props to be passed to the child Clickable component.")]),t._v(" "),s("td")])])])])}],!1,null,null,null);n.options.__file="AsyncButton.md";e.default=n.exports}}]);